{"version":3,"sources":["utils.js","components/Uploader/index.js","components/Pixelizator.js","reportWebVitals.js","index.js"],"names":["getById","id","document","getElementById","drag","classList","add","drop","remove","Uploader","size","useState","isLoaded","setLoaded","image","setImage","sliderVal","setSliderVal","useEffect","value","c","createElement","img1","Image","src","URL","createObjectURL","onload","w","width","h","height","ctx","getContext","drawImage","pixelArr","getImageData","data","sample_size","y","x","p","fillStyle","fillRect","toDataURL","pixelate","className","style","overflow","htmlFor","left","type","min","max","onChange","e","target","step","alt","onClick","preview","removeChild","firstChild","event","fileName","files","previewImg","setAttribute","innerHTML","appendChild","dragNDrop","onDragOver","onDrop","Pixelizator","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4b5558bc.chunk.js","sourcesContent":["export const pixelate = (image, value) => {\n  const c = document.createElement('canvas');\n\n  const img1 = new Image();\n  img1.src = URL.createObjectURL(image);\n\n  img1.onload = function () {\n    const w = img1.width;\n    const h = img1.height;\n\n    c.width = w;\n    c.height = h;\n    const ctx = c.getContext('2d');\n    ctx.drawImage(img1, 0, 0);\n\n    let pixelArr = ctx.getImageData(0, 0, w, h).data;\n    if (value !== '0') {\n      let sample_size = value * 10;\n\n      for (let y = 0; y < h; y += sample_size)\n        for (let x = 0; x < w; x += sample_size) {\n          let p = (x + y * w) * 4;\n          ctx.fillStyle =\n            'rgba(' +\n            pixelArr[p] +\n            ',' +\n            pixelArr[p + 1] +\n            ',' +\n            pixelArr[p + 2] +\n            ',' +\n            pixelArr[p + 3] +\n            ')';\n          ctx.fillRect(x, y, sample_size, sample_size);\n        }\n    }\n    const img2 = getById('previewImg');\n    img2.src = c.toDataURL('image/jpeg');\n  };\n};\n\nexport const getById = (id) => document.getElementById(id);\nexport const dragNDrop = (event) => {\n  let fileName = URL.createObjectURL(event.target.files[0]);\n  let preview = getById('preview');\n  let previewImg = document.createElement('img');\n  previewImg.setAttribute('src', fileName);\n  previewImg.setAttribute('id', 'previewImg');\n  preview.innerHTML = '';\n  preview.appendChild(previewImg);\n  return true;\n};\nexport const drag = () => {\n  getById('uploadFile').classList.add('dragging');\n};\nexport const drop = () => {\n  getById('uploadFile').classList.remove('dragging');\n};\n","import React, { useEffect, useState } from 'react';\nimport './index.scss';\nimport { drag, dragNDrop, drop, getById, pixelate } from '../../utils';\n\nfunction Uploader({ size }) {\n  const [isLoaded, setLoaded] = useState(false);\n  const [image, setImage] = useState(null);\n  const [sliderVal, setSliderVal] = useState('0');\n\n  useEffect(() => {\n    if (image) pixelate(image, sliderVal);\n  }, [image, sliderVal]);\n\n  return (\n    <div\n      className=\"borders\"\n      style={{\n        width: `${size}vw`,\n        height: `${size}vw`,\n        overflow: isLoaded ? 'initial' : 'hidden',\n      }}\n    >\n      {!isLoaded && (\n        <>\n          <div className=\"borders__top\" />\n          <div className=\"borders__right\" />\n          <div className=\"borders__bottom\" />\n          <div className=\"borders__left\" />\n        </>\n      )}\n      <div className=\"uploader\">\n        <div id=\"preview\">\n          {isLoaded && (\n            <div className=\"controls\">\n              <div className=\"slider\">\n                <output\n                  htmlFor=\"fader\"\n                  id=\"volume\"\n                  style={{ left: `calc(15px + ${+sliderVal * 8.8}%)` }}\n                >\n                  {sliderVal}\n                </output>\n                <input\n                  type=\"range\"\n                  id=\"fader\"\n                  min=\"0\"\n                  max=\"10\"\n                  onChange={(e) => setSliderVal(e.target.value)}\n                  value={sliderVal}\n                  step=\"1\"\n                />\n              </div>\n              <img\n                src=\"delete.svg\"\n                alt=\"delete\"\n                onClick={() => {\n                  setImage(null);\n                  setSliderVal('0');\n                  setLoaded(false);\n                  const preview = getById('preview');\n                  preview.removeChild(preview.firstChild);\n                }}\n              />\n            </div>\n          )}\n        </div>\n        {!isLoaded && (\n          <>\n            <div className=\"title\">Drop or select image</div>\n            <input\n              id=\"uploadFile\"\n              type=\"file\"\n              onChange={(event) => {\n                if (dragNDrop(event)) {\n                  setImage(event.target.files[0]);\n                  setLoaded(true);\n                }\n              }}\n              onDragOver={drag}\n              onDrop={drop}\n            />\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Uploader;\n","import React from 'react';\nimport '../index.scss';\nimport Uploader from './Uploader';\n\nfunction Pixelizator() {\n  return (\n    <div className=\"main\">\n      <Uploader size={30} />\n    </div>\n  );\n}\n\nexport default Pixelizator;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Pixelizator from './components/Pixelizator';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Pixelizator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}